---

- name: "Setting hostname to 'pihole'"
  hostname:
    name: pihole
  tags: admin

- name: 'Reboot'
  shell: sleep 2 && reboot
  async: 1
  poll: 0
  ignore_errors: true
  tags: pihole
  when: ansible_facts['nodename'] != "pihole"

- name: "Wait for Raspberry PI to come back"
  wait_for_connection:
    delay: 20
    timeout: 240
  when: ansible_facts['nodename'] != "pihole"

- name: 'Disable WIFI and Bluetooth'
  copy: src=./files/raspi-blacklist.conf dest=/etc/modprobe.d/raspi-blacklist.conf mode=0600
  tags: admin

- name: Upgrade all packages (debian)
  apt:
    name: "*"
    state: latest
    update_cache: yes
    cache_valid_time: 86400
  when: ansible_facts['os_family'] == "Debian"

- name: Upgrade all packages (redhat)
  dnf:
    name: "*"
    state: latest
  when: ansible_facts['os_family'] == "RedHat"


- name: Install admin tools (vim, htop, ntop, nmap)
  ansible.builtin.package:
    package: "{{ item }}"
    state: present
  with_items:
    - vim
    - htop
    - nmap
    - atop
    - php-cli
    - php-curl
  tags: admin


- name: Install ufw (ony debian)
  ansible.builtin.package:
    package: "ufw"
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Configure ufw - deny all incoming (ony debian)
  community.general.ufw:
    state: enabled
    policy: deny
    direction: incoming
  when: ansible_facts['os_family'] == "Debian"

- name: Configure ufw - deny routed traffic (ony debian)
  community.general.ufw:
    state: enabled
    policy: deny
    direction: routed
  when: ansible_facts['os_family'] == "Debian"

- name: Configure ufw - limit ssh (ony debian)
  community.general.ufw:
    rule: limit
    port: 22
  when: ansible_facts['os_family'] == "Debian"

- name: Configure ufw - allow dns requests (ony debian)
  community.general.ufw:
    rule: limit
    port: 53
  when: ansible_facts['os_family'] == "Debian"

- name: Start ufw (ony debian)
  ansible.builtin.systemd:
    state: started
    name: ufw
  when: ansible_facts['os_family'] == "Debian"

- name: Enable ufw at reboot (ony debian)
  ansible.builtin.systemd:
    enabled: true
    name: ufw
  when: ansible_facts['os_family'] == "Debian"


- name: Install firwalld (only redhat)
  ansible.builtin.package:
    package: "firewalld"
    state: present
  when: ansible_facts['os_family'] == "RedHat"

- name: Allow dns requests (only redhat)
  ansible.posix.firewalld:
  port: 53/udp
    permanent: yes
    state: enabled

- name: Enable firewalld at reboot (only redhat)
  ansible.builtin.systemd:
    state: enabled
    name: firewalld
  when: ansible_facts['os_family'] == "RedHat"


- name: "Create dnscrypt-proxy user (nobody)"
  ansible.builtin.user:
    name: nobody
    shell: /usr/sbin/nologin
    home: /nonexistent
    create_home: no
    password: '!' # disabled user!

- name: "Create dnscrypt directory"
  become: true
  file:
    name="/opt/dnscrypt-proxy"
    state=directory
    owner="nobody"
  tags: dnscrypt-proxy

- name: "Copy dnscrypt files"
  synchronize:
    src: ./files/dnscrypt-proxy
    dest: /opt
  tags: dnscrypt-proxy

- name: "Set dnscrypt binary file permissions"
  ansible.builtin.shell: |
    sudo chown -R nobody:staff /opt/dnscrypt-proxy
    sudo chmod +x /opt/dnscrypt-proxy/dnscrypt-proxy

  tags: dnscrypt-proxy

- name: "Install and start dnscrypt service (listening on 127.0.0.1:5300)"
  become: true
  ansible.builtin.shell: |
    sudo /opt/dnscrypt-proxy/dnscrypt-proxy -service install
    sudo /opt/dnscrypt-proxy/dnscrypt-proxy -service start
  tags: dnscrypt-proxy

- name: "Download Pi-Hole installer"
  get_url:
      url: https://install.pi-hole.net
      dest: ~/install-pihole.sh
      mode: 0740
  tags: pihole

- name: Create pihole configuration directory
  become: True
  file:
    name="{{ fspath_pihole_config }}"
    state=directory
    owner="{{ user_pihole }}"
    mode=0755
  tags: pihole

- name: Create pihole configuration
  become: True
  template:
    src="setupVars.conf.j2"
    dest="{{ fspath_pihole_config }}/setupVars.conf"
    owner=root
    group=root
    mode=0644
  tags: pihole

- name: Set static IP configuration
  become: True
  template:
    src="etc_network_interfaces.j2"
    dest="/etc/network/interfaces"
    owner=root
    group=root
    mode=0644
  tags: pihole

- name: Set default DNS
  become: True
  template:
    src="etc_resolf.conf.j2"
    dest="/etc/resolv.conf"
    owner=root
    group=root
    mode=0644
  tags: admin

- name: Install Pi-Hole
  shell: "~/install-pihole.sh --unattended"
  register: dbg_install_pihole
  tags: pihole

- name: Set PiHole to update every week
  become: True
  ansible.builtin.cron:
    name: "Update pihole"
    day: "*/7"
    job: "/usr/local/bin/pihole -up >/home/pi/piholeUpdate.log 2>&"

- name: 'Reboot after pihole installation'
  shell: sleep 2 && reboot
  async: 1
  poll: 0
  ignore_errors: true
  tags: pihole

- name: "Wait for Raspberry PI to come back after full installation"
  wait_for_connection:
    delay: 20
    timeout: 240

- name: "Add whitelists to pihole"
  ansible.builtin.shell: |
    cd /opt
    git clone https://github.com/anudeepND/whitelist.git
    sudo python3 whitelist/scripts/whitelist.py

- name: "Update Whitelists every week"
  become: True
  ansible.builtin.cron:
    name: "Update pihole"
    day: "*/7"
    job: "python3 /opt/whitelist/scripts/whitelist.py >/dev/null 2>&"

- name: "Install automated pihole blacklist updater"
  ansible.builtin.shell: |
    wget -O - https://raw.githubusercontent.com/jacklul/pihole-updatelists/master/install.sh | sudo bash
  
- name: "Copy pihole updater config file"
  become: True
  template:
    src="./files/pihole-updatelists.conf"
    dest="/etc/pihole-updatelists.conf"
    owner=root
    group=root
    mode=0644

- name: "Run the updater"
  ansible.builtin.shell: |
    sudo pihole-updatelists

- name: Update Pihole blocking list every night
  become: true
  ansible.builtin.cron:
    name: "Update pihole adblocklist"
    minute: 0
    hour: "2"
    job: "sudo /usr/local/sbin/pihole-updatelists >/dev/null 2>&"

- name: Update the Pihole blocking list script every week
  become: true
  ansible.builtin.cron:
    name: "Update pihole adblocklist"
    day: "*/7"
    job: "sudo /usr/local/sbin/pihole-updatelists --update > /home/pi/piholeAdListUpdater.log 2>&"
